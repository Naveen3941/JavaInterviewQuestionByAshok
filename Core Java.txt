DeadLocks

>>if two threads waiting for each other forever this situation is called deadlock.

>>Synchrnoized keyword is the cause for deadlock  

  package multithreading;

public class TestDeadlockExample1 {
	 public static Object Lock1 = new Object();
	   public static Object Lock2 = new Object();
	   
	   public static void main(String args[]) {
	      ThreadDemo1 T1 = new ThreadDemo1();
	      ThreadDemo2 T2 = new ThreadDemo2();
	      T1.start();
	      T2.start();
	   }
	   
	   private static class ThreadDemo1 extends Thread {
	      public void run() {
	    	  synchronized (Lock1) {
	            System.out.println("Thread 1: Holding lock 1...");
	            
	           /* try { //Thread.sleep(10); }
	            catch (InterruptedException e) {}*/
	            System.out.println("Thread 1: Waiting for lock 2...");
	            
	            synchronized (Lock2) {
	               System.out.println("Thread 1: Holding lock 1 & 2...");
	            }
	         }
	      }
	   }
	   private static class ThreadDemo2 extends Thread {
	      public void run() {
	         synchronized (Lock2) {
	            System.out.println("Thread 2: Holding lock 2...");
	            
	            /*try { //Thread.sleep(10); }
	            catch (InterruptedException e) {}
*/	            System.out.println("Thread 2: Waiting for lock 1...");
	            
	            synchronized (Lock1) {
	               System.out.println("Thread 2: Holding lock 1 & 2...");
	            }
	         }
	      }
	   } 
	}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 -> Java synchronized method?

    If you declare any method as synchronized, it is known as synchronized method.

    Synchronized method is used to lock an object for any shared resource.

    When a thread invokes a synchronized method, it automatically acquires the lock for that object and releases it when the thread completes its task.

  (

   -> when we use Synchrnoization means there is no dependcy one thread to another thread. means employee consist have fields salary and awards. means there is no 
      dependcy.

  ->  Synchrnoization means allow at a time only one thread. means locking that thread.)

   class Table{  
 synchronized void printTable(int n){//synchronized method  
   for(int i=1;i<=5;i++){  
     System.out.println(n*i);  
     try{  
      Thread.sleep(400);  
     }catch(Exception e){System.out.println(e);}  
   }  
  
 }  
}  
  
class MyThread1 extends Thread{  
Table t;  
MyThread1(Table t){  
this.t=t;  
}  
public void run(){  
t.printTable(5);  
}  
  
}  
class MyThread2 extends Thread{  
Table t;  
MyThread2(Table t){  
this.t=t;  
}  
public void run(){  
t.printTable(100);  
}  
}  
  
public class TestSynchronization2{  
public static void main(String args[]){  
Table obj = new Table();//only one object  
MyThread1 t1=new MyThread1(obj);  
MyThread2 t2=new MyThread2(obj);  
t1.start();  
t2.start();  
}  
}  





/////////////////////////////////////////////////////////////////////////////////////////////////////////////


-> Difference between fail fast and fail safe?

     Fail Fast:

   ->When you perform add, update or remove on collection while iterating on it. 
     It throws java.util.ConcurrentModificationException.

   ->if you share between two or more threads. one thread is adding another one is iterating on elements it will throw
     ConcurrentModificationException.
     
     Fail Safe:
   ->it iterate over the copy of original collection. So it would not throw Exception.

   List:in List when we are performing at a time iterating and adding it will throws concurrent modification exception. in this problem overcome to use 
        Copy write on Array List.

   -> 1.CopyWriteOnArrayList.
   -> 2.Collections.synchronizedList();

   package collections;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;

public class FailFastList {

	
		  public static void main(String[] args) 
		    { 
		     
			 
			  //List<Integer> al =  Collections.synchronizedList(new ArrayList<Integer>());
			  List<Integer> al =  new CopyOnWriteArrayList<Integer>();
		      
			  al.add(1); 
		        al.add(2); 
		        al.add(3); 
		        al.add(4); 
		        al.add(5); 
		       
		        
		        synchronized(al)
		        {
		            Iterator<Integer> iterator = al.iterator();
		            while (iterator.hasNext())
		            {
		                System.out.println(iterator.next());
		                al.add(6);
		            }
		        }
		        
		        System.out.println(al);
		    }
	}


   
   Set:in Set when we are performing at a time iterating and adding it will throws concurrent modification exception. in this problem overcome to use 
        ConcurrentSkipListSet.

      1.ConcurrentSkipListSet.
      -> 2.Collections.synchronizedSet();

      package collections;

import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.concurrent.ConcurrentSkipListSet;

public class FailFastSet {
	
	public static void main(String[] args) {
		
		//Set<Integer> s1=new HashSet<Integer>();
		Set<Integer> s1=new ConcurrentSkipListSet<Integer>();
		ConcurrentSkipListSet<Integer> s2=new ConcurrentSkipListSet<Integer>();
		//Collections.synchronizedList(list)
		s1.add(1);
		s1.add(2);
		s1.add(3);
		s1.add(4);
		
		
		Iterator<Integer> itr=s1.iterator();
		System.out.println(s1);
		
		while(itr.hasNext())
		{
			System.out.println(itr.next());
			 s1.add(8);
			 //System.out.println(itr.next());
			
		}
	}

}
     Map:in Map when we are performing at a time iterating and adding it will throws concurrent modification exception. in this problem overcome to use 
        ConcurrentHashMap.
          ConcurrentHashMap.
      -> 2.Collections.synchronizedMap();
  


   Program:
    
   package collections;

  import java.util.HashMap;
  import java.util.Map;
  import java.util.concurrent.ConcurrentHashMap;

  public class FailFastHashMap {

	
public static void main(String[] args) {
	
	Map<Integer,String> h1=new ConcurrentHashMap<>();
	h1.put(1, "aaa");
	h1.put(2,"bbb");
	h1.put(3,"ccc");
	
	

    for(Map.Entry<Integer,String> m2:h1.entrySet())
    {
    	System.out.println(m2.getKey()+"...."+m2.getValue());
    	h1.put(4, "ddd");
    }

	h1.put(4, "ddd");
	System.out.println("jjjj");
}
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


-> Contains method in array list?

   suppose we are entering the employee details whether it is avilbe or not by using contains method.

   package collections;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class ListContains {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		
		Set<Employee> l2=new HashSet<>();
		
		Employee e1=new Employee();
		e1.setId(1);
		e1.setName("kavi");
		
		Employee e2=new Employee();
		e2.setId(2);
		e2.setName("navi");
		
		l2.add(e1);
		l2.add(e2);
		
		Employee e3=new Employee();
		e3.setId(2);
		e3.setName("navi");
		
		boolean b = l2.contains(e3);
		System.out.println(">>>>>>"+b);
		
	}

}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 -> RemovingDuplicates in arrayList?
    
    By Using HashSet class we are removing duplicates.

    package collections;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

public class RemovingDuplicates {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		List<Employee> l1=new ArrayList<Employee>();
		Employee emp1=new Employee();
		Employee emp2=new Employee();
		Employee emp3=new Employee();
		Employee emp4=new Employee();
		
		emp1.setId(1);
		emp1.setName("aaa");
		
		emp2.setId(2);
		emp2.setName("bbb");
		
		emp3.setId(3);
		emp3.setName("ccc");
		
		emp4.setId(1);
		emp4.setName("aaa");
		
		l1.add(emp1);
		l1.add(emp2);
		l1.add(emp3);
		l1.add(emp4);
		
		Set<Employee> t2=new HashSet<Employee>(l1);
		Set<Employee> t27=new TreeSet<Employee>(l1);
		for(Employee t1:t27)
		{
			System.out.println(t1.getId()+"..."+t1.getName());
		}
	}

}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

->  InterThread Communication in java?

    if you use two synchronized method to communicate with each other with help of inter thread communication.
 
    1.wait(): Causes current thread to release the lock and wait until either another thread invokes the notify() method 
              or the notifyAll() method for this object, or a specified amount of time has elapsed. 

    2.notify(): wake up single thread.

    3.notifyAll(): wake up All thread.

    package interthreadcommunication;
public class WaitExample {
  private static Object monitor = new Object();
  private static boolean fileProcessed = false;
  
  public static class Process1Thread extends Thread
  {
    public void run() {
      while(!fileProcessed) {
        synchronized(monitor) {
          try {
        	  System.out.println("Process1Thread");
            monitor.wait();
            System.out.println("wait released");
          } catch(InterruptedException e) {
          
          }
        }
      }
      
      System.out.println("File Processed, now upload file...");
   }
  }
  
  public static class Process2Thread extends Thread
  {
    public void run() {
      System.out.println("Start Processing File...");
      
      //do some processing on the files here...
      
      fileProcessed = true;
      
      synchronized(monitor) {
        monitor.notifyAll();
        System.out.println("notifying to wait method");
      }
    }
  }
  
  public static void main(String[] args) {
    new Process1Thread().start();
    new Process2Thread().start();
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
->  Difference between wait and sleep?

     Wait                                            Sleep

 1.wait releases the lock.                   1.sleep does not release the lock. it elepsed to specified amount of time.

 2.wait method from object class.            2.sleep method from Thread class
    


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

-> Volatile?
   
   Volatile is releated to the visibility of variables modified by multiple thread during concurrent programming.
   every read or write of volatile variable will be to main memory and not cpu cache.


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

-> Atomic?

  When data (typically a variable) can be accessed by several threads, you must synchronize the access to the data to ensure visibility and correctness.

  package atomic;
  
  This class works really well in single-threaded environment, but doesn’t work at all when several threads access the same Counter instance

import java.util.concurrent.atomic.AtomicInteger;

public class Counter {
    private AtomicInteger counter=new AtomicInteger();
 
    public int getValue(){
        return counter.get();
    }

    public   int increment(){
        return   counter.incrementAndGet();
    }
} 


package atomic;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
//import com.infotech.count.Counter;

public class ClientTest {

	public static void main(String[] args) {
		
		ExecutorService executorService = null;
		Counter counter = new Counter();
		try {
			executorService = Executors.newFixedThreadPool(2);

			Runnable task1 =()->{
				for (int i = 1; i <=20000; i++) {
					counter.increment();
				}
			};

			Runnable task2 =()->{
				for (int i = 1; i <=80000; i++) {
					counter.increment();
				}
			};

			executorService.submit(task1);
			executorService.submit(task2);
			executorService.awaitTermination(1, TimeUnit.SECONDS);

			System.out.println("Final counter Value:"+counter.getValue());
		} catch (Exception e) {
			e.printStackTrace();
		}finally {
			if(executorService != null)
				executorService.shutdown();
		}
		
		
		
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

-> marker interface?

 if an interface does not have methods is called marker interace. 


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

-> Anonymous Inner Class in Java?

  it is an inner class with out class name and for which only we used single object is created.

  Annoymous inner class can extend class and implement interface.

  Defineing a class with no identity.

  package annonymousinnerclass;


interface Age
{
	int m=23;
	void age();
	
}

public class AnnoymousExample {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Age a1=new Age()
				{

					@Override
					public void age() {
						// TODO Auto-generated method stub
						System.out.println("hai");
					}

			
				};
				a1.age();
			
				

	}

}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

-> why cant we override constructor in java?

   because of class name as constructor name thats why we cant override  in constructor.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

-> What is abstract class? Why a class become abstract?

   An abstract class contain normal methods and abstract methods. normal methods means concreate methods.for example abstract vehicle class contains

   fuel,ac,power-window methods. but all vehicles are not mandatory to ac and power-window but fuel is mandatory. 100% defination is there is class.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

-> why abstract cant be final and why abstract cant be static?

  final means we cant modifiable it is fixed.it is illegal combination of modifiers in java (abstract and final).

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 @Modifying
@Query("update User u set u.firstname = ?1, u.lastname = ?2 where u.id = ?3")
void setUserInfoById(String firstname, String lastname, Integer userId);
@Query is for defining custom query and @Modifying is for telling spring-data-jpa that this query is an update operation and 
it requires executeUpdate() not executeQuery(). 
