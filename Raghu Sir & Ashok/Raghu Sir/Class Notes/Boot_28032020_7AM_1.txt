            Configuration Properties working with Collections Part#2
  --------------------------------------------------------------------------
 2D Collections:
a. Map<K,V>    [java.util]
b. Properties  [java.util]

=> Both Collections stores data in key=val format. Here Map value can be 
   any DataType like Integer,String,Double..etc where as Properties value 
   type is default set to String only.

=> Map, we need to provide generic type, where properties is not.

=> Syntax:
  prefix.variable.mapKey=mapVal
  prefix.variable.propKey=propVal

===Example Application======================================
#1. application.properties
-------------------------------
#prefix.variable.mapKey=mapVal
app.pinfo.code=ABC
app.pinfo.vendor=NIT
app.pinfo.mode=SAMPLE

app.pmcount.m1=55
app.pmcount.m2=69
app.pmcount.m3=42

#prefix.variable.propKey=propVal
app.mydata.sid=98
app.mydata.model=NEW
app.mydata.format=yes
------------------------------
2. Runner class code
package in.nit.runner;
//ctrl+shift+O
@Component
@ConfigurationProperties("app")
public class MyDataReadRunner implements CommandLineRunner {

  private Map<String,String> pinfo;
  private Map<String,Integer> pmcount;
  
  private Properties mydata;
  
  @Override
  public void run(String... args) throws Exception {
    System.out.println(this);
  }
  //alt+shift+S,R>SelectAll>OK
  //alt+shift+S,S>OK
}
******************************************************************************
           Configuration Properties working with HAS-A Relation
 +=+  +=+  +=+  +=+  +=+  +=+  +=+  +=+  +=+  +=+  +=+  +=+  +=+  +=+  +=+  +=+ 

HAS-A : using Child (class) as a DataType and creating one variable in Parent
       (class) is called as HAS-A relation.

Syntax in application.properties:-
[Primitives in Model]
   prefix.hasaVariable.variable=value

[1D Collections in Model]
  prefix.hasaVariable.variable[index]=value

[2D Collections in Model]
  prefix.hasaVariable.variable.mapKey=mapValue

==** Example **==
1. application.properties
#prefix.hasaVariable.variable=value
mydata.eob.eid=10
mydata.eob.ename=A
mydata.eob.esal=9.9

#prefix.hasaVariable.variable[index]=value
mydata.eob.projs[0]=P1
mydata.eob.projs[1]=P2
mydata.eob.projs[2]=P3

#prefix.hasaVariable.variable.mapKey=mapVal
mydata.eob.pversions.V1=3.3
mydata.eob.pversions.V2=4.5
mydata.eob.pversions.V3=9.1


2. Model class
package in.nit.model;
public class Employee {
	private int eid;
	private String ename;
	private double esal;
	
	private List<String> projs;
	private Map<String,Double> pversions;
	//alt+shift+S,R>SelectAll>OK
         //alt+shift+S,S>OK
}
3. Runner class
package in.nit.runner;
//ctrl+shift+O
@Component
@ConfigurationProperties("mydata")
public class MyDataRunner implements CommandLineRunner {
	private Employee eob; //HAS-A
	
	public void run(String... args) throws Exception {
		System.out.println(this);
	}

	//alt+shift+S,R>SelectAll>OK
        //alt+shift+S,S>OK
}
===Task===========================================
Task#1 Define a Runner with studentId(sid), sname,sfee,course
       read data from properties file
Task#2 Define a Runner with stdSubjects(List), marks(Map<String,Integer>)
       read data from properties file
        
	***************************************************************
        *                  YAML (Input File)                          *
	***************************************************************

*) YAML = Yamalian Language
*) It sotres data in key-val format
*) Symbol replace .(dot) with :(colon)
*) file name: application.yml 
*) It uses one API SnakeYaml, which wil parse YAML file as key-val
   and given to Spring container.

*) Syntax:
key1:
  key2:
    key3:<oneSpace>val

Example:
--application.properties-------------------
spring.datasource.driver=Oracle
spring.datasource.url=jdbc-mysql
spring.datasource.user=root
spring.datasource.password=nit
-------------------------------------------
Example:
--application.yml----------------------------
spring:
  datasource:
        driver: Oracle
	url: jdbc-mysql
	user: root
	password: nit
----------------------------------------------
  Example Application:
1. application.yml   (rename file : F2)
app:
  pid: 10
  pcode: ABC
  pcost: 25.50
2. Runner
package in.nit.runner;
@Component
@ConfigurationProperties("app")
public class MyDataRead implements CommandLineRunner {

	private int pid;
	private String pcode;
	private double pcost;
	
	@Override
	public void run(String... args) throws Exception {
		System.out.println(this);
	}
 //set,get..toString..
}


