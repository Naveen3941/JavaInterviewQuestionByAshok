       <properties>
		<failOnMissingWebXml>false</failOnMissingWebXml>
		<maven.compiler.source>13</maven.compiler.source>
		<maven.compiler.target>13</maven.compiler.target>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.glassfish.jersey.containers</groupId>
			<artifactId>jersey-container-servlet</artifactId>
			<version>2.30</version>
		</dependency>
		<dependency>
			<groupId>org.glassfish.jersey.inject</groupId>
			<artifactId>jersey-hk2</artifactId>
			<version>2.30</version>
		</dependency>
	</dependencies>

--AppConfig---------------
package in.nit.config;

import javax.ws.rs.ApplicationPath;

import org.glassfish.jersey.server.ResourceConfig;

import in.nit.filter.SecureRestFilter;

@ApplicationPath("/rest")
public class AppConfig 
	extends ResourceConfig
{

	public AppConfig() {
		packages("in.nit");
		register(SecureRestFilter.class);
	}
}
--------RestController-----
package in.nit.controller;

import javax.annotation.security.DenyAll;
import javax.annotation.security.PermitAll;
import javax.annotation.security.RolesAllowed;
import javax.ws.rs.GET;
import javax.ws.rs.Path;

@Path("/pay")
public class PaymentRestController {

	@GET
	@Path("/msg")
	//Client! Do you want to access this method?
	//Ok, carry on!! No security (no un/pwd, no role)
	@PermitAll
	public String showWelcomeMsg() {
		return "welcome to PayTM payment Service";
	}
	
	@GET
	@Path("/allpays")
	//This is for internal usages only
	//this is incomplete methods
	//Client! Do you want to access this method?
	//Sorry, Not possible (even you provide un/pwd, role)
	@DenyAll
	public String viewAllPaymentsInfo() {
		return "NO ONE CAN SEE THIS";
	}
	
	//Client! Do you want to access this method?
	//Provide un,pwd and Role any one Of(MERCH,USER)
	@GET
	@Path("/doAmtPay")
	@RolesAllowed({"MERCH","USER"})
	public String doPayBill() {
		return "BMS(MERCH),AJAY(USER)";
	}
	
}
------------------Secure Filter--------------
package in.nit.filter;

import java.io.IOException;
import java.lang.reflect.Method;

import javax.annotation.security.DenyAll;
import javax.annotation.security.PermitAll;
import javax.ws.rs.container.ContainerRequestContext;
import javax.ws.rs.container.ContainerRequestFilter;
import javax.ws.rs.container.ResourceInfo;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;


public class SecureRestFilter 
	implements ContainerRequestFilter
{
	
	@Context
	private ResourceInfo info;

	@Override
	public void filter(ContainerRequestContext req) throws IOException {
		Method m=info.getResourceMethod();
		System.out.println("Current Method Requested is:"+m.getName());
		//client request -> do you want access method having permitAll?
		//if yes-> goto rest controller
		//else (if not)
		if(!m.isAnnotationPresent(PermitAll.class)) {
			//client ? do you want deny all method
			if(m.isAnnotationPresent(DenyAll.class)) {
				req.abortWith(Response.status(Status.FORBIDDEN)
						.entity("You can not access this")
						.build());
				return;
			}
			
			//remaining code...
		}
		
	}
}
